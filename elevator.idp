// First name: Ruben
// Last name: Kindt
// Student number: r0656495


// FIXED VOCABULARY
// DO NOT CHANGE THIS VOCABULARY
LTCvocabulary V_fixed {
    type Time isa nat			// A set of time points
    Start: Time 				// The initial time point
    partial Next(Time): Time 	// The successor time point of time point t
    
    type Floor isa nat									// The set of floors
    type DoorState constructed from {Closed, Open}		// A set of possible states of the elevator’s doors
	
    // Fluents
    ElPosition(Time):Floor				// The floor of the elevator at time point t
    ElDoorState(Time):DoorState			// The state of the elevator’s doors at time point t
    UnansweredRequest(Time, Floor)		// Denotes that there is an unanswered request at floor f at time point t
    
    // Actions
    MakeRequest(Time, Floor) 			// Denotes that a request is made for floor f at time point t
}


// STUDENT VOCABULARY
// Here you can add new types, functions and predicates
LTCvocabulary V_student {
    extern vocabulary V_fixed
    type Direction constructed from {up, down}
    opposite(Direction):Direction

    //fluents
    ElDirection(Time, Direction)
    C_ElDirection(Time, Direction)		// cause to change direction
    CN_ElDirection(Time, Direction)		// cause to not change direction
    
    IPosition(Time, Floor)
    Cchange_ElPos(Time, Floor)			// cause to position change
    CNchange_ElPos(Time, Floor)			// cause to not position change

    IDoor(Time, DoorState)
    Cchange_Door(Time, DoorState)
    CNchange_Door(Time, DoorState)
    
    IRequest(Time, Floor)
    AnsweredRequest(Time, Floor)
    
    maxFloor: Floor 
    
    reqBelow(Time) //True if UA req below
    reqAbove(Time) //True if UA req below
    closesUAReq(Time, Floor) //True if at Time the closest floor is Floor
    closesUAReqBelow(Time, Floor) //True if at Time the closest floor below is Floor
    closesUAReqAbove(Time, Floor) //True if at Time the closest floor above is Floor
}

// TIME THEORY
// DO NOT CHANGE THIS THEORY
Theory T_fixed : V_student {
    // Defining time
    {
        Start = MIN[:Time].
        ! t: Next(t) = t+1 <- Time(t+1).
    }
}

// STUDENT THEORY
// Here you should model the dynamic elevator system
Theory T_student:V_student {
    // maxFloor is the highest possible floor
    maxFloor=MAX[:Floor].
    
    {//the opposite of up is down and vice verse
        opposite(up)=down.
        opposite(down)=up.
    }
    {//inertias elavator position
        ! floor[Floor]: ElPosition(Start) = floor <- IPosition(Start, floor).
        ! floor[Floor] t[Time]: ElPosition(Next(t)) = floor <- Cchange_ElPos(t, floor).
        ! floor[Floor] t[Time]: ElPosition(Next(t)) = floor <- ElPosition(t) = floor & ~CNchange_ElPos(t, floor) .
    }
    {
        IPosition(Start, 0) <- .
        // cause to go up a floor is: 
        //that the direction is up, not down, door is closed and we are not handling a request atm
        ! floor[Floor] t[Time]: Cchange_ElPos(t, floor + 1) <- ElPosition(t) = floor & 
        	ElDirection(t, up) & ~ElDirection(t, down) & ElDoorState(t) = Closed & ~UnansweredRequest(t, floor).
        
        //analoge
        ! floor[Floor] t[Time]: Cchange_ElPos(t, floor - 1) <- ElPosition(t) = floor & 
        	ElDirection(t, down) & ~ElDirection(t, up) & ElDoorState(t) = Closed & ~UnansweredRequest(t, floor).
       
        // cause not no change floor is when no change occures.
        ! t[Time] f[Floor] f2[Floor]: 
        	CNchange_ElPos(t, f) <- Cchange_ElPos(t, f2) & f ~= f2.
    }
   	{
      //We can change directions to up/down when we are not going down/up and there is no reason to change directions.
        ! t[Time] d[Direction]: ElDirection(t, d) <- C_ElDirection(t, d).
                
        //we keep going up/down if we were going up/down, not going opposite and there is no reason to change direction
        ! t[Time] d[Direction]: ElDirection(Next(t), d) <- ElDirection(t, d) & ~ElDirection(t, opposite(d))  & 
        	 CN_ElDirection(Next(t), d).
	}
    {
    	//We can change directions to up when we are not going down, not at the highest floor and 
        //the closest requiest is above or here.
        ! t[Time] f[Floor]: C_ElDirection(t, up) <- ~ElDirection(t, down) & ~ElPosition(t) = maxFloor &
        	closesUAReq(t, f) & ElPosition(t)=<f.
        
        //We can change directions to down when we are not going up, not at the lowest floor and 
        //the closest requiest is below.
        ! t[Time] f[Floor]: C_ElDirection(t, down) <- ~ElDirection(t, up) & ~ElPosition(t) = 0 & 
        	closesUAReq(t, f) & ElPosition(t)>f.
        
        
        //the cause to not change direction is when there is a UARequest at the current position
        ! t[Time] d[Direction]: CN_ElDirection(t,d) <- UnansweredRequest(t, ElPosition(t)).
        
        //the cause to not change direction is when there is a UARequest above
        ! t[Time] d[Direction]: CN_ElDirection(t, up) <- reqAbove(t).
        
        //the cause to not change direction is when there is a UARequest above
        ! t[Time] d[Direction]: CN_ElDirection(t, down) <- reqBelow(t).
    }

    
    {//doors
         
        ! d[DoorState]: ElDoorState(Start) = d <- IDoor(Start, d).
        ! d[DoorState] t[Time]: ElDoorState(Next(t)) = d <- Cchange_Door(t, d).
        ! d[DoorState] t[Time]: ElDoorState(Next(t)) = d <- ElDoorState(t) = d & ~CNchange_Door(t, d).
    }
    {
        IDoor(Start, Closed) <- .
        //cause to open a door is that there is an UA request and the door was closed
        ! t[Time]: Cchange_Door(t, Open)   <- UnansweredRequest(t, ElPosition(t)) & ElDoorState(t) = Closed.
        //cause to close a door is that there is an UA request and the door was open
        ! t[Time]: Cchange_Door(t, Closed) <- UnansweredRequest(t, ElPosition(t)) & ElDoorState(t) = Open.
        
        // cause not no change the door is when no change occures.
        ! t[Time] d[DoorState] d2[DoorState]: 
        	CNchange_Door(t, d) <- Cchange_Door(t, d2) & d ~= d2.
        
        //a request has been anwsered when the el is at the position, opened its doors and closed it again
        ! t[Time] floor[Floor]: AnsweredRequest(Next(t), floor) <- ElPosition(t) = floor & 
        	ElDoorState(t) = Open & ElDoorState(Next(t)) = Closed.
    }
    {// there are request above/below
        // A request is below when it is below the current position of the el
    	!t[Time]: reqBelow(t) <- #{floor[Floor]: UnansweredRequest(t, floor) & floor<ElPosition(t)}>0.
    	!t[Time]: reqAbove(t) <- #{floor[Floor]: UnansweredRequest(t, floor) & floor>ElPosition(t)}>0.
  	}

    //this could have been done using definitions, but 
    //follows the structure of the closesUAReqBelow and closesUAReqAbove dues requires a bit more definitiond  
    
	//if closested UA Request exist then it is a closest above or below UA request 
    !t[Time] floor[Floor]: closesUAReq(t, floor) => closesUAReqBelow(t, floor) | closesUAReqAbove(t, floor).
    
    //there can not be multiple diff closest UAreq
    !t[Time] floor[Floor] floor2[Floor]: closesUAReq(t, floor) & closesUAReq(t, floor2) => floor=floor2.
    
    //If there is a closested UAReq below or above the there is at least a closesUAReq
    !t[Time] floor[Floor]: closesUAReqBelow(t, floor) | closesUAReqAbove(t, floor) => 
		#{f2[Floor]: closesUAReq(t, f2)}>0.
    
    //if the Closestd UAReq below is closer then above then it is a closesUAReq 
    !t[Time] fBelow[Floor] fAbove[Floor]: closesUAReq(t, fBelow) <= closesUAReqBelow(t, fBelow) & 
    	closesUAReqAbove(t, fAbove) & ElPosition(t)-fBelow<fAbove-ElPosition(t).

    //if the Closestd UAReq above is closer or eq then below then it is a closesUAReq 
    !t[Time] fBelow[Floor] fAbove[Floor]: closesUAReq(t, fAbove) <= closesUAReqBelow(t, fBelow) & 
    	closesUAReqAbove(t, fAbove) & ElPosition(t)-fBelow>=fAbove-ElPosition(t).
    
   
    //analogue above
    !t[Time] f[Floor]: closesUAReqBelow(t, f) => UnansweredRequest(t, f) & f<ElPosition(t).
    !t[Time] f[Floor] f2[Floor]: closesUAReqBelow(t, f) & closesUAReqBelow(t, f2) => f=f2.
    !t[Time] f[Floor]: UnansweredRequest(t, f) & f<ElPosition(t) => #{f2[Floor]: closesUAReqBelow(t, f2)}>0.
    
    //If there are multiple UnansweredRequest below then the fartest one is not the closest one
    //Saying what is not the closest floor below is easier than the other way around
    !t[Time] fClose[Floor] fFar[Floor]: ~closesUAReqBelow(t, fFar) <= UnansweredRequest(t, fClose) & 
		UnansweredRequest(t, fFar) & fFar<ElPosition(t) & fClose<ElPosition(t) & fClose>fFar.
    
    
    //analogue above
    !t[Time] f[Floor]: closesUAReqAbove(t, f) => UnansweredRequest(t, f) & f>=ElPosition(t).
    !t[Time] f[Floor] f2[Floor]: closesUAReqAbove(t, f) & closesUAReqAbove(t, f2) => f=f2.
    !t[Time] f[Floor]: UnansweredRequest(t, f) & f>=ElPosition(t) => #{f2[Floor]: closesUAReqAbove(t, f2)}>0.
    !t[Time] fClose[Floor] fFar[Floor]: ~closesUAReqAbove(t, fFar) <= UnansweredRequest(t, fClose) & 
    	UnansweredRequest(t, fFar) & fFar>=ElPosition(t) & fClose>=ElPosition(t) & fClose<fFar.

    
    // inertia Requests
    {
        //UnansweredRequest exists at a floor t+1 if there was a request at t and none existed at t 
        ! f[Floor] t[Time]: UnansweredRequest(Next(t), f) <- MakeRequest(t,f) & 
        	~UnansweredRequest(t, f).
        
        // UnansweredRequest keeps existing if not Answered
        ! f[Floor] t[Time]: UnansweredRequest(Next(t), f) <- UnansweredRequest(t, f) & 
        	~AnsweredRequest(Next(t), f).
    }    
}

//for testing: for all timepoints: the el can not have both directions to be true
theory dir_inv: V_student{
    !t[Time]: ~(ElDirection(t, up) & ElDirection(t, down)).
}

//ASSIGNMENT:
//If elevator moves the doors are closed !
theory move_inv: V_student{
    !t[Time] f[Floor]: Cchange_ElPos(t, f) => ElDoorState(t) = Closed.
}
// Doors are never open if there is no call waiting on that floor !
theory door_inv: V_student{
    !t[Time] f[Floor]: ElPosition(t)=f & (~UnansweredRequest(t,f))=> ElDoorState(t) = Closed.
}
Structure S_Inv:V_student{
	Time = {0..20}
	Floor = {0..5}
	Start = 0
}
procedure proveInvariants(){
    //print(isinvariant(T_student,dir_inv,S_Inv), ": Direction Invariant")
	print(isinvariant(T_student,move_inv,S_Inv), ": Move Invariant")
	print(isinvariant(T_student,door_inv,S_Inv), ": Door Invariant")
}

// MAIN PROCEDURE
procedure main() {
	proveInvariants()
    local CompleteTheory = merge(T_fixed, T_student) 
        
    model = onemodel(CompleteTheory, S21)
    
    // Printing model 
    print(model)

    // Visualization
    initVisualization()
    visualizeElevator(model)
}

// File responsible for visualization  
include "visualize_elevator.idp"

// Structures for testing
// You can open this file and check the given structures 
include "structures.idp"
