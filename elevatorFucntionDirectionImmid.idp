// First name: Ruben
// Last name: Kindt
// Student number: r0656495


// FIXED VOCABULARY
// DO NOT CHANGE THIS VOCABULARY
LTCvocabulary V_fixed {
    type Time isa nat			// A set of time points
    Start: Time 				// The initial time point
    partial Next(Time): Time 	// The successor time point of time point t
    
    type Floor isa nat									// The set of floors
    type DoorState constructed from {Closed, Open}		// A set of possible states of the elevator’s doors
	
    // Fluents
    ElPosition(Time):Floor				// The floor of the elevator at time point t
    ElDoorState(Time):DoorState			// The state of the elevator’s doors at time point t
    UnansweredRequest(Time, Floor)		// Denotes that there is an unanswered request at floor f at time point t
    
    // Actions
    MakeRequest(Time, Floor) 			// Denotes that a request is made for floor f at time point t
}


// STUDENT VOCABULARY
// Here you can add new types, functions and predicates
LTCvocabulary V_student {
    extern vocabulary V_fixed
    type Direction constructed from {up, down}
    //did not decide for a none direction, since it is not a direction and waiting should prevent moving in a direction and not be a direction itself
    //If none was a direction should not interfear with 
    	//only up<->down changes take a time unit
    		//none should not be added because it is not a 
    //fluents
    ElDirection(Time, Direction) // better than ElDirection(Time)=Direction because if will output one of the {up, down} while this is the set of {up, down} which can be the empty set aka waiting
    
    Cchange_ElDirection(Time, Direction)	//cause to change p113
    
    Cchange_ElPos(Time, Floor)			// cause to position change
    CNchange_ElPos(Time, Floor)			// cause to not position change

    Cchange_Door(Time, DoorState)
    CNchange_Door(Time, DoorState)
    
    AnswerRequest(Time, Floor)
    waiting(Time)
	
    maxFloor: Floor 
    
    reqBelow(Time)
    reqAbove(Time)
    closesUAReq(Time, Floor)
    closesUAReqBelow(Time, Floor)
    closesUAReqAbove(Time, Floor)
}

// TIME THEORY
// DO NOT CHANGE THIS THEORY
Theory T_fixed : V_student {
    // Defining time
    {
        Start = MIN[:Time].
        ! t: Next(t) = t+1 <- Time(t+1).
    }
}


// STUDENT THEORY
// Here you should model the dynamic elevator system
Theory T_student:V_student {
    maxFloor=MAX[:Floor].
    
    {
        ElPosition(Start) = 0.
        ! floor[Floor] t[Time]: 
        	ElPosition(Next(t)) = floor <- Cchange_ElPos(t, floor).
        ! floor[Floor] t[Time]: 
        	ElPosition(Next(t)) = floor <- ElPosition(t) = floor & ~CNchange_ElPos(t, floor) .
    }
    {
        ! floor[Floor] t[Time]: 
        	Cchange_ElPos(t, floor + 1) <- ElPosition(t) = floor & ElDirection(t, up) & ~ElDirection(t, down) & ElDoorState(t) = Closed & ~UnansweredRequest(t, floor).
        
        ! floor[Floor] t[Time]: 
        	Cchange_ElPos(t, floor - 1) <- ElPosition(t) = floor & ElDirection(t, down) & ~ElDirection(t, up) & ElDoorState(t) = Closed & ~UnansweredRequest(t, floor).
        
       /* ! floor[Floor] t[Time]: 
        	Cchange_ElPos(t, floor + 0) <- ElPosition(t) = floor & ElDirection(t) = none.
        */
        
        // cause not no change is whan no change occures.
        ! t[Time] f[Floor] f2[Floor]: 
        	CNchange_ElPos(t, f) <- Cchange_ElPos(t, f2) & f ~= f2.
    }
   	{
        //We can change directions to up when we are not going down, not at the highest floor and the closest requiest is above.
        ! t[Time] currentFloor[Floor] f[Floor]: ElDirection(t, up) <- ~ElDirection(t, down) & ElPosition(t)=currentFloor & ~currentFloor = maxFloor &
        	((closesUAReq(t, f) & currentFloor<f)).
        
        //we keep going up if we were going up, not going down, not at the higest floor and there is sill a request above
        ! t[Time] currentFloor[Floor]: ElDirection(Next(t), up) <- ElDirection(t, up) & ~ElDirection(t, down)  &
        	~ElPosition(Next(t)) = maxFloor & reqAbove(Next(t)).
        
        //We can change directions to down when we are not going up, not at the lowest floor and the closest requiest is below.
        ! t[Time] currentFloor[Floor] f[Floor]: ElDirection(t, down) <- ~ElDirection(t, up) & ElPosition(t)=currentFloor & ~ElPosition(t) = 0 &
        	 ((closesUAReq(t, f) & currentFloor>f)).
        
        ! t[Time] currentFloor[Floor]: ElDirection(Next(t), down) <- ElDirection(t, down) & ~ElDirection(t, up)  &
        	 ~ElPosition(Next(t))=0 & reqBelow(Next(t)).
	}
    
       
    {//doors
        ! t[Time] floor[Floor]: 
        	Cchange_Door(t, Open)   <- ElPosition(t) = floor & UnansweredRequest(t, floor) & ElDoorState(t) = Closed.
        ! t[Time] floor[Floor]: 
        	Cchange_Door(t, Closed) <- ElPosition(t) = floor & UnansweredRequest(t, floor) & ElDoorState(t) = Open.
        
        // cause not no change the door is whan no change occures.
        ! t[Time] d[DoorState] d2[DoorState]: 
        	CNchange_Door(t, d) <- Cchange_Door(t, d2) & d ~= d2.
        
        ! t[Time] floor[Floor]:
	        AnswerRequest(Next(t), floor) <- ElPosition(t) = floor & ElDoorState(t) = Open & ElDoorState(Next(t)) = Closed.// & ElDoorState(t) = Open.
    }
    {
        ElDoorState(Start) = Closed.
        ! d[DoorState] t[Time]: 
        	ElDoorState(Next(t)) = d <- Cchange_Door(t, d).
        ! d[DoorState] t[Time]: 
        	ElDoorState(Next(t)) = d <- ElDoorState(t) = d & ~CNchange_Door(t, d).
    }
    
    {// there are request above/below
    	!t[Time]: reqBelow(t) <- #{floor[Floor]: UnansweredRequest(t, floor) & floor<ElPosition(t)}>0.
    	!t[Time]: reqAbove(t) <- #{floor[Floor]: UnansweredRequest(t, floor) & floor>ElPosition(t)}>0.
  	}

    //this could have been done using definitions, but follows the structure of the closesUAReqBelow and closesUAReqAbove and requires a bit more definitiond
    !t[Time] f[Floor]: closesUAReq(t, f) => closesUAReqBelow(t, f) | closesUAReqAbove(t, f).
    !t[Time] f[Floor] f2[Floor]: closesUAReq(t, f) & closesUAReq(t, f2) => f=f2.
    !t[Time] f[Floor]: closesUAReqBelow(t, f) | closesUAReqAbove(t, f) => #{f2[Floor]: closesUAReq(t, f2)}>0.
    !t[Time] fBelow[Floor] fAbove[Floor]: closesUAReq(t, fBelow) <= closesUAReqBelow(t, fBelow) & closesUAReqAbove(t, fAbove) &
        ElPosition(t)-fBelow<fAbove-ElPosition(t).
    !t[Time] fBelow[Floor] fAbove[Floor]: closesUAReq(t, fAbove) <= closesUAReqBelow(t, fBelow) & closesUAReqAbove(t, fAbove) &
        ElPosition(t)-fBelow>=fAbove-ElPosition(t).
    
   
    //Saying what is not the closest floor below is easier than the other way around
    !t[Time] f[Floor]: closesUAReqBelow(t, f) => UnansweredRequest(t, f) & f<ElPosition(t).
    !t[Time] f[Floor] f2[Floor]: closesUAReqBelow(t, f) & closesUAReqBelow(t, f2) => f=f2.
    !t[Time] f[Floor]: UnansweredRequest(t, f) & f<ElPosition(t) => #{f2[Floor]: closesUAReqBelow(t, f2)}>0.
    !t[Time] fClose[Floor] fFar[Floor]: ~closesUAReqBelow(t, fFar) <= UnansweredRequest(t, fClose) & UnansweredRequest(t, fFar) &
        fFar<ElPosition(t) & fClose<ElPosition(t) & fClose>fFar.
    
    
    //this with definitions would make multiple closesUAReqAbove true while we only want one to be true
    !t[Time] f[Floor]: closesUAReqAbove(t, f) => UnansweredRequest(t, f) & f>ElPosition(t).
    !t[Time] f[Floor] f2[Floor]: closesUAReqAbove(t, f) & closesUAReqAbove(t, f2) => f=f2.
    !t[Time] f[Floor]: UnansweredRequest(t, f) & f>ElPosition(t) => #{f2[Floor]: closesUAReqAbove(t, f2)}>0.
    !t[Time] fClose[Floor] fFar[Floor]: ~closesUAReqAbove(t, fFar) <= UnansweredRequest(t, fClose) & UnansweredRequest(t, fFar) &
        fFar>ElPosition(t) & fClose>ElPosition(t) & fClose<fFar.

    // inertia Requests
    {
        ! floor[Floor] t[Time]: UnansweredRequest(t, floor) <- MakeRequest(t,floor).
        ! floor[Floor] t[Time]: 
        	UnansweredRequest(Next(t), floor) <- UnansweredRequest(t, floor) & 
        	~(ElPosition(t) = floor & ElDoorState(t) = Open & ElDoorState(Next(t)) = Closed).
    }
    
}

//If elevator moves the doors are closed !
theory move_inv: V_student{
    !t[Time] f[Floor]: Cchange_ElPos(t, f) => ElDoorState(t) = Closed.
}
// Doors are never open if there is no call waiting on that floor !
theory door_inv: V_student{
    !t[Time] f[Floor]: ElPosition(t)=f & ~UnansweredRequest(t,f)=> ElDoorState(t) = Closed.
}
Structure S_Inv:V_student{
	Time = {0..20}
	Floor = {0..5}
	Start = 0
}
procedure proveInvariants(){
    print("inv")
	print(isinvariant(T_student,move_inv,S_Inv))
	print(isinvariant(T_student,door_inv,S_Inv))
}


// MAIN PROCEDURE
// If you have to change the main procedure for debugging purposes, be careful and restore it back once you finish debugging.
procedure main() {
    local CompleteTheory = merge(T_fixed, T_student) 
    proveInvariants()
     
    SS=S16
    /*
    model = onemodel(CompleteTheory, S0)
    if model == nil then
        print("S0 FAILED")
    else
        print("S0 succes")        
    end    
    model = onemodel(CompleteTheory, S1)
    if model == nil then
        print("S1 FAILED")
    else
        print("S1 succes")   
    end    
	model = onemodel(CompleteTheory, S2)
    if model == nil then
        print("S2 FAILED")
    else
        print("S2 succes")   
    end    
    model = onemodel(CompleteTheory, S3)
    if model == nil then
        print("S3 FAILED")
    else
        print("S3 succes")   
    end
    */
    model = onemodel(CompleteTheory, S4)
    if model == nil then
        print("S4 FAILED")
    else
        print("S4 succes")   
    end

    model = onemodel(CompleteTheory, S5)
    if model == nil then
        print("S5 FAILED")
    else
        print("S5 succes")   
    end
    
    model = onemodel(CompleteTheory, S6)
    if model == nil then
        print("S6 FAILED")
    else
        print("S6 succes")   
    end
    /*
    model = onemodel(CompleteTheory, S7)
    if model == nil then
        print("S7 FAILED")
    else
        print("S7 succes")   
    end
    
    model = onemodel(CompleteTheory, S8)
    if model == nil then
        print("S8 FAILED")
    else
        print("S8 succes")   
    end
    
    model = onemodel(CompleteTheory, S9)
    if model == nil then
        print("S9 FAILED")
    else
        print("S9 succes")   
    end
    */
    model = onemodel(CompleteTheory, S10)
    if model == nil then
        print("S10 FAILED")
    else
        print("S10 succes")   
    end
    
    model = onemodel(CompleteTheory, S11)
    if model == nil then
        print("S11 FAILED")
    else
        print("S11 succes")   
    end
    
	model = onemodel(CompleteTheory, S12)
    if model == nil then
        print("S12 FAILED")
    else
        print("S12 succes")   
    end
    
    model = onemodel(CompleteTheory, S13)
    if model == nil then
        print("S13 FAILED")
    else
        print("S13 succes")   
    end
        
    model = onemodel(CompleteTheory, S14)
    if model == nil then
        print("S14 FAILED")
    else
        print("S14 succes")   
    end
    
	model = onemodel(CompleteTheory, S15)
    if model == nil then
        print("S15 FAILED")
    else
        print("S15 succes")   
    end
    
    model = onemodel(CompleteTheory, S16)
    if model == nil then
        print("S16 FAILED")
    else
        print("S16 succes")   
    end
    
	model = onemodel(CompleteTheory, SS)
    if model == nil then
        print("curent ss FAILED")
        explainunsat(CompleteTheory, SS)
        print("temp")
        print(explainunsat(CompleteTheory, SS))
        //model = unsatstructure(CompleteTheory, SS)
        print("curent ss FAILED")
        
    else 
        print("curent ss sucess")
    	print(model)
    	// Visualization
    	initVisualization()
    	visualizeElevator(model)
    end
    
}

/*
procedure minimumExplanation(partialS,consequence,rules) {
	negativeCons = makefalse(FalseStr) // negationofconsequence, use makefalseprocedure
	Sunsat = merge(partialS, negativeCons)
	return unsatstructure(rules, Sunsat)
}
procedure main( ) {
	consequences = optimalPropagate(Row3NoDouble5 , S )
	for consequence in consequences do
		minimumExplanation(S , consequence, Row3NoDouble5 )
	end
}
*/

// File responsible for visualization  
include "visualize_elevator.idp"

// Structures for testing
// You can open this file and check the given structures 
include "structures.idp"
